<?php namespace thedial;

use Exception;

class RSS_Handler {
    private static bool $debug = false;
    private static bool $description_only = false;
    private static int $enable_transients = 1;
    private static string $debugFeed = '/wp-content/uploads/thedial.world.xml';
    private static string $url;
    private static string $issue_name = 'The Dial';

    // Define the remapping rules.
    private static array $remapping = [
        'item.media:content' => 'item.media:thumbnail',
        // Add more remapping rules here if needed.
    ];

    // Analytics script
    private static string $analyticsScript = <<<EOD
  <script async src="https://www.googletagmanager.com/gtag/js?id=G-LTGBFE0083"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('set', 'developer_id.dZjQwMz', true);gtag('config', 'G-LTGBFE0083');</script>
EOD;


    public static function fetchAndParseMultiple( $feeds ): string {
        self::$description_only = true;

        $items = [];
        foreach ( $feeds as $feed => $url ) {
            try {
                $parsed = RSS_Handler::fetchAndParse( $url[ 'issue_feed' ], true );

                // extract all the <item> parts of the feed
                $parsed = preg_match_all( '/<item>.*<\/item>/s', $parsed, $matches );
                $items  = array_merge( $items, $matches[ 0 ] );

                // add the channel to the items array
                // $items [] = $channel;
            } catch ( \Exception $e ) {
                echo $e->getMessage();
            }
        }

        // get time in this format: Wed, 30 Aug 2023 15:58:51 GMT
        $time = gmdate( 'D, d M Y H:i:s T' );
        $logo = self::get_logo_url();

        $header = <<<EOD
<?xml version="1.0" encoding="UTF-8"?>
<!--Generated by Site-Server v6.0.0-bd08363c5f525c300cdf1da00cfc63b90988d054-1 (http://www.squarespace.com) on {$time}-->
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://www.rssboard.org/media-rss" version="2.0" snf="http://www.smartnews.be/snf">
<channel>
<title>The Dial</title>
    <link>https://www.thedial.world/</link>
    <lastBuildDate>{$time}</lastBuildDate>
    <language>en-US</language>
    <generator>Site-Server v6.0.0-bd08363c5f525c300cdf1da00cfc63b90988d054-1 (http://www.squarespace.com)</generator>
    <description><![CDATA[Latest from The Dial]]></description>
    <logo xmlns="http://www.smartnews.be/snf">
      <url>{$logo}</url>
    </logo>

EOD;
        $items  = implode( ' ', $items );

        $footer = <<<EOD

</channel>
</rss>
EOD;

        $combined_feed = $header . $items . $footer;

        // strip whitespace
        return preg_replace( '/\s+/', ' ', $combined_feed );
    }

    /**
     * @throws Exception
     */
    public static function fetchAndParse( string $url ): bool|string {
        $url = self::get_url( $url );

        if ( ! $url ) {
            throw new Exception( 'No URL provided:' . $url );
        }

        if ( self::$enable_transients ) {
            $url_hash = md5( $url );
            if ( $rss = get_transient( 'thedial_rss_' . $url_hash ) ) {
                return $rss;
            }
        } else {
            Cache::clearCache();
        }

        try {
            $context      = self::create_context();
            $feed_content = self::fetch_feed_content( $context, $url );
        } catch ( \Exception $e ) {
            return $e->getMessage();
        }

        $rss = self::parse_feed_content( $feed_content );

        self::modify_feed( $rss, $url );

        // save to a transient with a 12-hour expiration
        $rss = self::generate_XML_string( $rss );

        // strip whitespace
        $rss = preg_replace( '/\s+/', ' ', $rss );

        if ( self::$enable_transients ) {
            set_transient( 'thedial_rss_' . $url_hash, $rss, 12 * HOUR_IN_SECONDS );
        }

        return $rss;
    }

    private static function get_url( $url ): string {
        if ( self::$debug ) {
            return home_url() . self::$debugFeed;
        }

        return $url ?: 'This is not a valid URL: ' . $url;
    }

    private static function create_context() {
        $options = [
            'http' => [
                'header' => "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13\r\n"
            ]
        ];

        return stream_context_create( $options );
    }

    private static function fetch_feed_content( $context, $url ) {
        $feed_content = file_get_contents( $url, false, $context );

        if ( $feed_content === false ) {
            $error = error_get_last();
            echo "Error loading the RSS feed: " . $error[ 'message' ];
        }

        return $feed_content;
    }

    private static function parse_feed_content( $feed_content ) {
        return simplexml_load_string( $feed_content, null, LIBXML_NOCDATA );
    }

    /**
     * Feed
     *
     * @param $rss
     * @param $url
     */
    private static function modify_feed( $rss, $url ) {
        self::set_channel( $rss, $url );
        self::modify_items( $rss );
        self::wrap_content_encoded_in_CDATA( $rss );
    }

    /**
     * Feed
     *
     * @param $rss
     */
    private static function set_channel( $rss ) {
        // Set the title of the channel
        if ( empty( $rss->channel->title ) ) {
            // get first item link
            $first_item_link = $rss->channel->item[ 0 ]->link;
            // preg_match the pattern '/issue-(\d+)/' to get the issue number
            preg_match( '/issue-(\d+)/', $first_item_link, $matches );
            // set the title to Issue {issue number}
            $rss->channel->title       = 'Issue ' . $matches[ 1 ];
            $rss->channel->description = 'Latest Issue of The Dial';
        }
        // Add the snf namespace to the channel
        $rss->addAttribute( 'xmlns:snf', 'http://www.smartnews.be/snf' );

        // Create the snf:logo element in the channel
        $logoElement = $rss->channel->addChild( 'logo', null, 'http://www.smartnews.be/snf' );
        $logoElement->addChild( 'url', self::get_logo_url() );
    }

    private static function get_logo_url() {
        return home_url() . '/wp-content/themes/thedialrss/assets/build/images/The+Dial+logo_black.png';
    }

    /**
     * Feed
     *
     * @param $rss
     */
    private static function modify_items( $rss ) {
        foreach ( $rss->channel->item as $item ) {
            self::remap_content( $item );
            self::sanitize_creator( $item );
            self::add_analytics_element( $rss, $item );
        }
    }

    private static function remap_content( $item ) {
        foreach ( self::$remapping as $from => $to ) {
            if ( $from === 'item.media:content' ) {
                self::handle_media_content_remapping( $item );
            }
            // Add logic for other remapping rules as needed...
        }
    }

    private static function wrap_content_in_CDATA( $dom, $tagNames ) {
        foreach ( $tagNames as $tagName ) {
            $tags = $dom->getElementsByTagName( $tagName );
            foreach ( $tags as $tag ) {
                $cdata          = $dom->createCDATASection( $tag->nodeValue );
                $tag->nodeValue = ''; // Clear existing content
                $tag->appendChild( $cdata );
            }
        }
    }

    private static function wrap_content_encoded_in_CDATA( $rss ) {
        $dom = dom_import_simplexml( $rss )->ownerDocument;
        self::wrap_content_in_CDATA( $dom, [ 'encoded', 'description' ] );
    }


    /**
     * Item
     *
     * @param $item
     * @param $content
     * @param $media
     */
    private static function handle_media_content_remapping( $item ) {
        $content = $item->children( 'http://purl.org/rss/1.0/modules/content/' );
        $media   = $item->children( 'http://www.rssboard.org/media-rss' );

        if ( self::$description_only ) {
            $content->encoded = $item->description;
        }

        $thumbnailUrl = (string)$media->content->attributes()[ 'url' ];

        $contentDom = self::create_content_dom( $content );

        self::insert_thumbnail( $contentDom, $thumbnailUrl );

        // $content->encoded = $contentDom->saveHTML();

        $body = $contentDom->getElementsByTagName( 'body' )->item( 0 );

        $innerBodyHTML = '';
        $children      = $body->childNodes;
        foreach ( $children as $child ) {
            $innerBodyHTML .= $body->ownerDocument->saveHTML( $child );
        }

        $content->encoded = $innerBodyHTML;

        $thumbnailElement = self::create_thumbnail_element( $item, $thumbnailUrl );
        unset( $media->content );
    }

    /**
     * Feed
     *
     * @param $rss
     *
     * @return string
     */
    private static function generate_XML_string( $rss ) {
        $dom               = dom_import_simplexml( $rss )->ownerDocument;
        $dom->formatOutput = true;
        $xmlString         = $dom->saveXML();

        return html_entity_decode( $xmlString, ENT_QUOTES, 'UTF-8' );
    }

    /**
     * Item
     *
     * @param $item
     */
    private static function sanitize_creator( $item ) {
        $dc = $item->children( 'http://purl.org/dc/elements/1.1/' );
        if ( isset( $dc->creator ) ) {
            $dc->creator = str_replace( '&', '&amp;', $dc->creator );
        }
    }

    /**
     * Item
     *
     * @param $rss
     * @param $item
     */
    private static function add_analytics_element( $rss, $item ) {
        // if ( self::$description_only ) {
        //     return;
        // }

        // Get the DOM object for the 'item' node
        $itemDom = dom_import_simplexml( $item );

        // Convert the SimpleXMLElement object to a DOM object
        $dom               = dom_import_simplexml( $rss )->ownerDocument;
        $dom->formatOutput = true;


        // Create a new 'snf:analytics' element
        $analyticsElement = $dom->createElement( 'snf:analytics' );

        // Create a CDATA section with the analytics script
        $cdata = $dom->createCDATASection( self::$analyticsScript );

        // Append the CDATA section to the 'snf:analytics' element
        $analyticsElement->appendChild( $cdata );

        // Append the 'snf:analytics' element to the 'item' node after the 'media:thumbnail' element
        $itemDom->appendChild( $analyticsElement );
    }

    /**
     * Item
     *
     * @param $contentDom
     * @param $thumbnailUrl
     */
    private static function insert_thumbnail( $contentDom, $thumbnailUrl ) {
        $img = $contentDom->createElement( 'img' );
        $img->setAttribute( 'src', $thumbnailUrl );
        $img->setAttribute( 'alt', 'Thumbnail' );
        $p = $contentDom->createElement( 'p' );
        $p->appendChild( $img );
        $firstParagraph = $contentDom->getElementsByTagName( 'p' )->item( 0 );
        $firstParagraph->parentNode->insertBefore( $p, $firstParagraph );
    }

    private static function create_content_dom( $content ): \DOMDocument {
        $contentDom            = new \DOMDocument();
        $libxml_previous_state = libxml_use_internal_errors( true );
        $contentDom->loadHTML( mb_convert_encoding( (string)$content->encoded, 'HTML-ENTITIES', 'UTF-8' ) );
        libxml_use_internal_errors( $libxml_previous_state );

        return $contentDom;
    }

    /**
     * Item
     *
     * @param $item
     * @param $thumbnailUrl
     *
     * @return \DOMElement
     */
    private static function create_thumbnail_element( $item, $thumbnailUrl ): \DOMElement {
        $itemDom          = dom_import_simplexml( $item );
        $thumbnailElement = $itemDom->ownerDocument->createElementNS( 'http://www.rssboard.org/media-rss', 'media:thumbnail' );
        $thumbnailElement->setAttribute( 'url', $thumbnailUrl );
        $firstChild = $itemDom->firstChild;
        $itemDom->insertBefore( $thumbnailElement, $firstChild );

        return $thumbnailElement;
    }
}
